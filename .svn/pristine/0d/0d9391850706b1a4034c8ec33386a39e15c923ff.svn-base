<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.employee.dao.empMgtDao">
   
   <!-- 사원 재직중 -->
	<select id="empList" resultType="kr.happyjob.study.employee.model.empMgtModel">
		 SELECT us.loginID
		 				, us.name
		 				, dc2.detail_name AS department
		 				, dc1.detail_name AS rank
		 				, us.regdate
		 				, us.leave_state
		 				, us.leave_date
		 				, f.file_code
  		 FROM tb_userinfo us inner join tb_detail_code dc1 
      			on us.grade_code = dc1.detail_code AND dc1.group_code = "grade_code"
    		inner join tb_detail_code dc2
      			on us.dep_code = dc2.detail_code AND dc2.group_code = "dep_code" 	
      		left outer join tb_file f 
      			on 	us.file_code = f.file_code
      			<where>
				    <if test="state != null">
					    <if test="state eq 'N'.toString()">			
					    	and us.leave_state = 'N'
					  	</if>
						<if test="state eq 'Y'.toString()">
							and us.leave_state = 'Y'
						</if>
					</if>
					<if test="(dep_codeKey != null) and (!dep_codeKey.equals(''))">
				    and us.dep_code = #{dep_codeKey}
					</if>
					<if test="(grade_codeKey != null) and (!grade_codeKey.equals(''))">
				    and us.grade_code = #{grade_codeKey}
					</if>
					<if test="(searchKey != null) and (!searchKey.equals('') and (searchKey.equals('loginID')))">
				    and us.loginID Like CONCAT('%', #{searchWord}, '%')
					</if>
					<if test="(searchKey != null) and (!searchKey.equals('') and (searchKey.equals('name')))">
				    and us.name Like CONCAT('%', #{searchWord}, '%')
					</if>
					<if test="(from_date != null) and (!from_date.equals(''))">			
				    and  us.regdate <![CDATA[>=]]> #{from_date}
				    </if>
					<if test="(to_date != null) and (!to_date.equals(''))">
					and  us.regdate <![CDATA[<=]]> #{to_date}
					</if>
			</where>	
      	 ORDER BY us.regdate DESC	
      	 LIMIT #{pageIndex}, #{empPageSize}					
	</select>
	
	 <!-- 사원수 카운트 -->
	 <select id="countListEmp" resultType="int">
		SELECT 
				count(*) as emp_cnt 
		 FROM tb_userinfo us inner join tb_detail_code dc1 
      			on us.grade_code = dc1.detail_code AND dc1.group_code = "grade_code"
    		inner join tb_detail_code dc2
      			on us.dep_code = dc2.detail_code AND dc2.group_code = "dep_code" 	 	
		<where>
				   <if test="state != null">
					    <if test="state eq 'N'.toString()">			
					    	and us.leave_state = 'N'
					  	</if>
						<if test="state eq 'Y'.toString()">
							and us.leave_state = 'Y'
						</if>
					</if>
					<if test="(dep_codeKey != null) and (!dep_codeKey.equals(''))">
				    and us.dep_code = #{dep_codeKey}
					</if>
					<if test="(grade_codeKey != null) and (!grade_codeKey.equals(''))">
				    and us.grade_code = #{grade_codeKey}
					</if>
					<if test="(searchKey != null) and (!searchKey.equals('') and (searchKey.equals('loginID')))">
				    and us.loginID Like CONCAT('%', #{searchWord}, '%')
					</if>
					<if test="(searchKey != null) and (!searchKey.equals('') and (searchKey.equals('name')))">
				    and us.name Like CONCAT('%', #{searchWord}, '%')
					</if>
					<if test="(from_date != null) and (!from_date.equals(''))">			
				    and  us.regdate <![CDATA[>=]]> #{from_date}
				    </if>
					<if test="(to_date != null) and (!to_date.equals(''))">
					and  us.regdate <![CDATA[<=]]> #{to_date}
					</if>
			</where>	
	</select>
	
	<!-- 신규 사번 생성을 위한 MAX 값 추출 -->
	<select id="maxNum" resultType="int" >
		SELECT CONCAT(DATE_FORMAT(now(),'%Y'),SUBSTR(max(loginID),5,7))+1 AS maxNum 
		FROM tb_userinfo
		WHERE loginID != "admin"
	</select>
	
	
	<!-- 사원 신규 등록  --> 
	<insert id="empRegist">	
	INSERT INTO tb_userinfo
							(
									loginID
								  ,name
								  ,security_num
								  ,birthday
								  ,password
								  ,sex
								  ,email
								  ,hp
								  ,loc_detail
								  ,loc
								  ,post
								  ,bank_code
								  ,account
								  ,dep_code
								  ,grade_code
								  ,regdate
								  ,salary
								  ,user_memo
								  ,user_type
								  ,leave_state
								  ,file_code
							) VALUES (
								  #{loginID}
								 ,#{name}
								 ,#{security_num}
								 ,#{birthday}
								 ,#{password}
								 ,IF((SUBSTR(security_num,8,1) = 1) OR (SUBSTR(security_num,8,1) = 3),1,2 )
								 ,CONCAT(#{mail1},'@',#{mail2})
								 ,CONCAT(#{tel1},'-',#{tel2},'-',#{tel3})
								 ,#{addr_detail}
								 ,#{addr}
								 ,#{zip_code}
								 ,#{bank}
								 ,#{account}
								 ,#{dept_cd}
								 ,'8'
								 ,DATE_FORMAT(now(),'%Y-%m-%d')
								 ,#{year_salary}
								 ,#{memo},
								  CASE
							           WHEN #{dept_cd} =  '1' THEN 'D'
							           WHEN #{dept_cd} =  '2' THEN 'C'
							           ELSE 'B'
							       END
							       ,'N' 
							       ,(select max(file_code) from tb_file)
							)
	</insert>
	
	<!-- 사원 신규 등록 시 승진 내역 insert  -->
	 <insert id="prmRegist">
	 <selectKey keyProperty="promcode" resultType="int" order="BEFORE">
	   	SELECT IFNULL(MAX(prom_code),0) +1
				  FROM tb_prm
		</selectKey>
	 INSERT INTO tb_prm(prm_date,prom_code,loginID,grade_code)
	 VALUES(DATE_FORMAT(now(),'%Y-%m-%d'),#{promcode},
	 																(SELECT  MAX(loginID)
  																	FROM tb_userinfo where loginID != 'admin'),'8'
	 )
	 </insert>
	 
	 	<!-- 사원 신규 등록 시 연봉 내역 insert  -->
	 <insert id="salRegist">
	 <selectKey keyProperty="salcode" resultType="int" order="BEFORE">
	   	SELECT IFNULL(MAX(sal_code),0) +1
				  FROM tb_sal
		</selectKey>
	 INSERT INTO tb_sal(sal_code, valid_from,  loginID, an_salary )
	 VALUES(#{salcode}, DATE_FORMAT(now(),'%Y-%m-%d'),
	 																(SELECT  MAX(loginID)
  																	FROM tb_userinfo where loginID != 'admin'),
  																	(select salary from tb_userinfo where loginId = (select max(loginID) from tb_userinfo where loginID != 'admin'))
  																	
	 )
	 </insert>


		<!-- 파일 신규 등록  --> 
	<insert id="fileRegist">
	<selectKey keyProperty="filecode" resultType="int" order="BEFORE">
	   	SELECT IFNULL(MAX(file_code),0) +1
				  FROM tb_file
		</selectKey>
	INSERT INTO tb_file
		
							(
								file_code
								,abs_path
								,rel_path
								,file_name
								,size
							) VALUES (
								 #{filecode}	
								 ,#{file_madd}
								 ,#{file_nadd}
								 ,#{file_name}
								 ,#{file_size}
							)
	</insert>
	
		<!-- 연봉 내역 업데이트  --> 
	<insert id="salUpdate">
	<selectKey keyProperty="salUpdatecode" resultType="int" order="BEFORE">
	   	SELECT IFNULL(MAX(sal_code),0) +1
				  FROM tb_sal
		</selectKey>
	INSERT INTO  tb_sal
		
							(
								sal_code
								,valid_from
								,loginID
								,an_salary
							) VALUES (
								 #{salUpdatecode}	
								 ,DATE_FORMAT(now() + interval 1 day,'%Y-%m-%d')
								 ,#{loginID}
								 ,#{year_salary}
							)
	</insert>
	
		<!-- 연봉 전 데이터 날짜 업데이트 -->
		<update id="salDateUpdate">
		UPDATE tb_sal 
					SET 	 valid_to = DATE_FORMAT(now(),'%Y-%m-%d')
		WHERE  loginID = #{loginID}	 AND valid_to is NULL	 
	</update>
	
		<!-- 승진 내역 업데이트  --> 
		<insert id="prmUpdate">
		<selectKey keyProperty="prmUpdatecode" resultType="int" order="BEFORE">
		   	SELECT IFNULL(MAX(prom_code),0) +1
					  FROM tb_prm
			</selectKey>
		INSERT INTO  tb_prm
			
								(
									prom_code
									,prm_date
									,grade_code
									,loginID
								) VALUES (
									 #{prmUpdatecode}
									 ,DATE_FORMAT(now(),'%Y-%m-%d')
									 ,#{poscd}
									 ,#{loginID}	
								)
		</insert>
	
		<!-- 사원 단건 조회  --> 
		<select id="empSelect" resultType="kr.happyjob.study.employee.model.empMgtModel">
		SELECT 
								  u.loginID
								  ,u.name
								  ,u.security_num
								  ,u.birthday
								  ,u.password
								  ,u.email
								  ,u.hp
								  ,u.loc
								   ,u.loc_detail
								   ,u.post
								  ,u.bank_code
								  ,u.account
								  ,u.dep_code
								  ,u.grade_code
								  ,u.leave_date
								  ,u.leave_state
								  ,u.regdate
								  ,u.salary
								  ,u.user_memo
								  ,td1.detail_name department
						          ,td2.detail_name rank
								  <if test="file_code != null">
									  ,t.file_code
					                  ,t.abs_path
					                  ,t.rel_path
					                  ,t.size
					                  ,t.file_name
				                  </if>
		FROM 
		tb_userinfo u
		INNER JOIN tb_detail_code td1 ON u.dep_code = td1.detail_code AND td1.group_code = 'dep_code'
		INNER JOIN tb_detail_code td2 ON u.grade_code = td2.detail_code AND td2.group_code = 'grade_code'
		<if test="file_code != null">
					     INNER JOIN  tb_file t
      			ON u.file_code = t.file_code
					  	</if>
					  	
		WHERE loginID = #{loginID}
	</select>
	
	<!-- 사원 정보 수정 -->
		<update id="empUpdate">
		UPDATE tb_userinfo 
					SET 	  
								  password = #{password}
								  ,email = CONCAT(#{mail1},'@',#{mail2})
								  ,hp = CONCAT(#{tel1},'-',#{tel2},'-',#{tel3})
								  ,loc = #{addr}
								  ,loc_detail = #{addr_detail}
								  ,post = #{zip_code}
								  ,bank_code = #{bank}
								  ,account = #{account}
								  ,dep_code = #{dept_cd}
								  ,grade_code = #{poscd}
								  ,salary = #{year_salary}
								  ,user_memo = #{memo}
								  ,user_type = CASE
														           WHEN #{dept_cd} =  '1' THEN 'D'
														           WHEN #{dept_cd} =  '2' THEN 'C'
														           ELSE 'B'
														       END
		WHERE  loginID = #{loginID}					 
	</update>
	
	<!-- 파일 수정 -->
	<update id="fileUpdate">
		UPDATE tb_userinfo u inner join tb_file t
        			ON u.file_code = t.file_code
					SET 	  
								  t.abs_path = #{file_madd}
								  ,t.rel_path = #{file_nadd}
								  ,t.size = #{file_size}
								  ,t.file_name = #{file_name}
		WHERE  t.file_code = #{file_code}					 
	</update>
	
	<!-- 퇴사 처리 -->
	<update id="leaveUpdate">
		UPDATE tb_userinfo
					SET 	  
								  leave_date = #{leave_date}
								  ,leave_memo = #{leave_memo}
								  ,leave_state = "Y"
		WHERE  loginID = #{loginID}						 
	</update>
	
	<!--  이력서 오등록을 위한 삭제 기능 -->
	<delete id="empDelete">
		DELETE FROM tb_userinfo
		WHERE  loginID = #{loginID}
	</delete>
	
	<!-- 삭제 된 이력서 등록 파일 삭제 -->
	<delete id="fileDelete">
		DELETE FROM tb_file
		WHERE  file_code = #{file_code}
	</delete>
	
	<!-- 이력서 삭제 시 승진내역 기록 우선 삭제 -->
	<delete id="prmDelete">
		DELETE FROM tb_prm
		WHERE  loginID = #{loginID}
	</delete>
	

</mapper>